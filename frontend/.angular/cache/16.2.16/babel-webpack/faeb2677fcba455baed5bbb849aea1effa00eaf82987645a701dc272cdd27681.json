{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/auth';\n    this.tokenKey = 'authToken';\n    this.userKey = 'currentUser';\n    this.currentUserSubject = new BehaviorSubject(this.getCurrentUser());\n    this.currentUser$ = this.currentUserSubject.asObservable();\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/signin`, credentials).pipe(tap(response => {\n      this.setSession(response);\n    }));\n  }\n  signup(userData) {\n    return this.http.post(`${this.apiUrl}/signup`, userData);\n  }\n  logout() {\n    return this.http.post(`${this.apiUrl}/logout`, {}).pipe(tap(() => {\n      this.clearSession();\n    }));\n  }\n  setSession(authResult) {\n    localStorage.setItem(this.tokenKey, authResult.accessToken);\n    const user = {\n      id: authResult.id,\n      email: authResult.email,\n      firstName: authResult.firstName,\n      lastName: authResult.lastName\n    };\n    localStorage.setItem(this.userKey, JSON.stringify(user));\n    this.currentUserSubject.next(user);\n  }\n  clearSession() {\n    localStorage.removeItem(this.tokenKey);\n    localStorage.removeItem(this.userKey);\n    this.currentUserSubject.next(null);\n  }\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  getCurrentUser() {\n    const userJson = localStorage.getItem(this.userKey);\n    return userJson ? JSON.parse(userJson) : null;\n  }\n  isLoggedIn() {\n    const token = this.getToken();\n    const user = this.getCurrentUser();\n    return !!(token && user);\n  }\n  getAuthHeaders() {\n    const token = this.getToken();\n    return new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","BehaviorSubject","tap","AuthService","constructor","http","apiUrl","tokenKey","userKey","currentUserSubject","getCurrentUser","currentUser$","asObservable","login","credentials","post","pipe","response","setSession","signup","userData","logout","clearSession","authResult","localStorage","setItem","accessToken","user","id","email","firstName","lastName","JSON","stringify","next","removeItem","getToken","getItem","userJson","parse","isLoggedIn","token","getAuthHeaders","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\georg\\LitheSpeed Dropbox\\George Lively\\lithespeed code\\livelytravelplanner2\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nexport interface User {\r\n  id: number;\r\n  email: string;\r\n  firstName: string;\r\n  lastName: string;\r\n}\r\n\r\nexport interface LoginRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface SignupRequest {\r\n  email: string;\r\n  password: string;\r\n  firstName: string;\r\n  lastName: string;\r\n}\r\n\r\nexport interface AuthResponse {\r\n  accessToken: string;\r\n  tokenType: string;\r\n  id: number;\r\n  email: string;\r\n  firstName: string;\r\n  lastName: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = 'http://localhost:8080/api/auth';\r\n  private tokenKey = 'authToken';\r\n  private userKey = 'currentUser';\r\n  \r\n  private currentUserSubject = new BehaviorSubject<User | null>(this.getCurrentUser());\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  login(credentials: LoginRequest): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/signin`, credentials)\r\n      .pipe(\r\n        tap(response => {\r\n          this.setSession(response);\r\n        })\r\n      );\r\n  }\r\n\r\n  signup(userData: SignupRequest): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/signup`, userData);\r\n  }\r\n\r\n  logout(): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/logout`, {})\r\n      .pipe(\r\n        tap(() => {\r\n          this.clearSession();\r\n        })\r\n      );\r\n  }\r\n\r\n  private setSession(authResult: AuthResponse): void {\r\n    localStorage.setItem(this.tokenKey, authResult.accessToken);\r\n    \r\n    const user: User = {\r\n      id: authResult.id,\r\n      email: authResult.email,\r\n      firstName: authResult.firstName,\r\n      lastName: authResult.lastName\r\n    };\r\n    \r\n    localStorage.setItem(this.userKey, JSON.stringify(user));\r\n    this.currentUserSubject.next(user);\r\n  }\r\n\r\n  private clearSession(): void {\r\n    localStorage.removeItem(this.tokenKey);\r\n    localStorage.removeItem(this.userKey);\r\n    this.currentUserSubject.next(null);\r\n  }\r\n\r\n  public getToken(): string | null {\r\n    return localStorage.getItem(this.tokenKey);\r\n  }\r\n\r\n  public getCurrentUser(): User | null {\r\n    const userJson = localStorage.getItem(this.userKey);\r\n    return userJson ? JSON.parse(userJson) : null;\r\n  }\r\n\r\n  public isLoggedIn(): boolean {\r\n    const token = this.getToken();\r\n    const user = this.getCurrentUser();\r\n    return !!(token && user);\r\n  }\r\n\r\n  public getAuthHeaders(): HttpHeaders {\r\n    const token = this.getToken();\r\n    return new HttpHeaders({\r\n      'Authorization': `Bearer ${token}`\r\n    });\r\n  }\r\n}"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,eAAe,QAAQ,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;AAiCpC,OAAM,MAAOC,WAAW;EAQtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAPhB,KAAAC,MAAM,GAAG,gCAAgC;IACzC,KAAAC,QAAQ,GAAG,WAAW;IACtB,KAAAC,OAAO,GAAG,aAAa;IAEvB,KAAAC,kBAAkB,GAAG,IAAIR,eAAe,CAAc,IAAI,CAACS,cAAc,EAAE,CAAC;IAC7E,KAAAC,YAAY,GAAG,IAAI,CAACF,kBAAkB,CAACG,YAAY,EAAE;EAErB;EAEvCC,KAAKA,CAACC,WAAyB;IAC7B,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAe,GAAG,IAAI,CAACT,MAAM,SAAS,EAAEQ,WAAW,CAAC,CACtEE,IAAI,CACHd,GAAG,CAACe,QAAQ,IAAG;MACb,IAAI,CAACC,UAAU,CAACD,QAAQ,CAAC;IAC3B,CAAC,CAAC,CACH;EACL;EAEAE,MAAMA,CAACC,QAAuB;IAC5B,OAAO,IAAI,CAACf,IAAI,CAACU,IAAI,CAAC,GAAG,IAAI,CAACT,MAAM,SAAS,EAAEc,QAAQ,CAAC;EAC1D;EAEAC,MAAMA,CAAA;IACJ,OAAO,IAAI,CAAChB,IAAI,CAACU,IAAI,CAAC,GAAG,IAAI,CAACT,MAAM,SAAS,EAAE,EAAE,CAAC,CAC/CU,IAAI,CACHd,GAAG,CAAC,MAAK;MACP,IAAI,CAACoB,YAAY,EAAE;IACrB,CAAC,CAAC,CACH;EACL;EAEQJ,UAAUA,CAACK,UAAwB;IACzCC,YAAY,CAACC,OAAO,CAAC,IAAI,CAAClB,QAAQ,EAAEgB,UAAU,CAACG,WAAW,CAAC;IAE3D,MAAMC,IAAI,GAAS;MACjBC,EAAE,EAAEL,UAAU,CAACK,EAAE;MACjBC,KAAK,EAAEN,UAAU,CAACM,KAAK;MACvBC,SAAS,EAAEP,UAAU,CAACO,SAAS;MAC/BC,QAAQ,EAAER,UAAU,CAACQ;KACtB;IAEDP,YAAY,CAACC,OAAO,CAAC,IAAI,CAACjB,OAAO,EAAEwB,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,CAAC;IACxD,IAAI,CAAClB,kBAAkB,CAACyB,IAAI,CAACP,IAAI,CAAC;EACpC;EAEQL,YAAYA,CAAA;IAClBE,YAAY,CAACW,UAAU,CAAC,IAAI,CAAC5B,QAAQ,CAAC;IACtCiB,YAAY,CAACW,UAAU,CAAC,IAAI,CAAC3B,OAAO,CAAC;IACrC,IAAI,CAACC,kBAAkB,CAACyB,IAAI,CAAC,IAAI,CAAC;EACpC;EAEOE,QAAQA,CAAA;IACb,OAAOZ,YAAY,CAACa,OAAO,CAAC,IAAI,CAAC9B,QAAQ,CAAC;EAC5C;EAEOG,cAAcA,CAAA;IACnB,MAAM4B,QAAQ,GAAGd,YAAY,CAACa,OAAO,CAAC,IAAI,CAAC7B,OAAO,CAAC;IACnD,OAAO8B,QAAQ,GAAGN,IAAI,CAACO,KAAK,CAACD,QAAQ,CAAC,GAAG,IAAI;EAC/C;EAEOE,UAAUA,CAAA;IACf,MAAMC,KAAK,GAAG,IAAI,CAACL,QAAQ,EAAE;IAC7B,MAAMT,IAAI,GAAG,IAAI,CAACjB,cAAc,EAAE;IAClC,OAAO,CAAC,EAAE+B,KAAK,IAAId,IAAI,CAAC;EAC1B;EAEOe,cAAcA,CAAA;IACnB,MAAMD,KAAK,GAAG,IAAI,CAACL,QAAQ,EAAE;IAC7B,OAAO,IAAIpC,WAAW,CAAC;MACrB,eAAe,EAAE,UAAUyC,KAAK;KACjC,CAAC;EACJ;;;uBAxEWtC,WAAW,EAAAwC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAX3C,WAAW;MAAA4C,OAAA,EAAX5C,WAAW,CAAA6C,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}